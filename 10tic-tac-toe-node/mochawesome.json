{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2018-12-05T05:09:19.155Z",
    "end": "2018-12-05T05:09:19.164Z",
    "duration": 9,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "77465582-24ed-4e57-ae2b-aa1a02b2a615",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "26d428eb-9ed0-4408-9c73-02a056775420",
        "title": "TicTacToe Tests",
        "fullFile": "C:\\Learning\\CodeAcademy\\dell-workbook\\10tic-tac-toe-node\\js\\index.js",
        "file": "\\10tic-tac-toe-node\\js\\index.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "should place mark on the board",
            "fullTitle": "#ticTacToe() should place mark on the board",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "ticTacToe(1, 1);\nassert.deepEqual(board, [[' ', ' ', ' '], [' ', 'X', ' '], [' ', ' ', ' ']]);",
            "err": {},
            "isRoot": false,
            "uuid": "d5876792-70dd-424a-8ec3-b0bf00f81ebc",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should alternate between players",
            "fullTitle": "#ticTacToe() should alternate between players",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "ticTacToe(0, 0);\nassert.deepEqual(board, [['O', ' ', ' '], [' ', 'X', ' '], [' ', ' ', ' ']]);",
            "err": {},
            "isRoot": false,
            "uuid": "e7985c75-8a0e-4871-9fa6-0cdf5ee1fc5e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should check for vertical wins",
            "fullTitle": "#ticTacToe() should check for vertical wins",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "board = [[' ', 'X', ' '], [' ', 'X', ' '], [' ', 'X', ' ']];\nassert.equal(verticalWin(), true);",
            "err": {},
            "isRoot": false,
            "uuid": "4b164b9d-9101-4a23-aa70-d3e75ed4db5a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should check for horizontal wins",
            "fullTitle": "#ticTacToe() should check for horizontal wins",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "board = [['X', 'X', 'X'], [' ', ' ', ' '], [' ', ' ', ' ']];\nassert.equal(horizontalWin(), true);",
            "err": {},
            "isRoot": false,
            "uuid": "63141e36-d53d-4802-9405-85cfbc82e725",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should check for diagonal wins",
            "fullTitle": "#ticTacToe() should check for diagonal wins",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "board = [['X', ' ', ' '], [' ', 'X', ' '], [' ', ' ', 'X']];\nassert.equal(diagonalWin(), true);",
            "err": {},
            "isRoot": false,
            "uuid": "9c10db77-5628-4e9a-b145-5ffc835fbf20",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should detect a win",
            "fullTitle": "#ticTacToe() should detect a win",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(checkForWin(), true);",
            "err": {},
            "isRoot": false,
            "uuid": "8c56c924-8735-4a51-a468-9f2fb91f6e9a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "d5876792-70dd-424a-8ec3-b0bf00f81ebc",
          "e7985c75-8a0e-4871-9fa6-0cdf5ee1fc5e",
          "4b164b9d-9101-4a23-aa70-d3e75ed4db5a",
          "63141e36-d53d-4802-9405-85cfbc82e725",
          "9c10db77-5628-4e9a-b145-5ffc835fbf20",
          "8c56c924-8735-4a51-a468-9f2fb91f6e9a"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}
